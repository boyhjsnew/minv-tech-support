import * as XLSX from "xlsx";

let excelData = []; // L∆∞u d·ªØ li·ªáu ƒë√£ mapping

const mapCustomerData = async (customerArray) => {
  excelData = customerArray.map((data) => ({
    "M√£ kh√°ch h√†ng *": data.ma_dt,
    "T√™n ƒë∆°n v·ªã": data.ten_dt,
    "M√£ s·ªë thu·∫ø": data.ms_thue || "",
    "Ng∆∞·ªùi mua h√†ng": data.dai_dien || "",
    "ƒê·ªãa ch·ªâ *": data.dia_chi || ".",
    "ƒêi·ªán tho·∫°i": data.dien_thoai || null,
    Email: data.email,
    "S·ªë t√†i kho·∫£n": null,
    "T√™n ng√¢n h√†ng": null,
  }));

  return excelData;
};

// üÜï Xu·∫•t file nh∆∞ng kh√¥ng t·∫£i xu·ªëng, m√† tr·∫£ v·ªÅ Blob
const exportToExcelAuto = () => {
  alert(excelData);
  if (excelData.length === 0) {
    throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t file!");
  }

  // T·∫°o workbook v√† worksheet
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.json_to_sheet(excelData);
  XLSX.utils.book_append_sheet(wb, ws, "KhachHang");

  // Xu·∫•t file Excel th√†nh Blob
  const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
  const blob = new Blob([excelBuffer], {
    type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  });

  return blob; // Tr·∫£ v·ªÅ file Blob ƒë·ªÉ upload ngay l·∫≠p t·ª©c
};

export { mapCustomerData, exportToExcelAuto };

import React, { useState, useRef } from "react";
import { Steps } from "primereact/steps";
import { Button } from "primereact/button";

import getDMKH from "../../Utils/GetDMKH.js";
import "../dashboard.scss";

import { Toast } from "primereact/toast";
import {
  mapCustomerDataAsync,
  exportToExcel,
} from "../../Utils/MappingDMKH.js";
import uploadExcelFile from "../../Utils/UploadExcel.js";

import { mapCustomerData, exportToExcelAuto } from "../../Utils/AutoMapping.js";
import getDMHH from "../../Utils/GetDMHH.js";
import { useSelector } from "react-redux";

export default function Customers() {
  const [activeIndex, setActiveIndex] = useState(-1);
  const [customerRaws, setCustomerRaws] = useState([]);
  const [loading, setLoading] = useState(false);
  const [loadingHH, setLoadingHH] = useState(false);
  const [countError, setCountError] = useState(0);
  const [countSuccess, setCountSuccess] = useState(0);
  const toast = useRef(null);

  const show = () => {
    toast.current.show({
      summary: "L·ªói",
      detail: errorMessage,
    });
  };

  const taxCode = useSelector((state) => state.taxCode.value);
  const fetchDataDMKH = async () => {
    console.log(taxCode);
    setErrorMessage("");
    setLoading(true);
    try {
      console.log("üìå ƒêang l·∫•y d·ªØ li·ªáu kh√°ch h√†ng...");
      const listDMKH = await getDMKH(taxCode);

      if (listDMKH.length > 0) {
        console.log("‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng:", listDMKH);
        setCustomerRaws(listDMKH); // C·∫≠p nh·∫≠t state nh∆∞ng ch∆∞a d√πng ngay!

        const mappedData = await mapCustomerDataAsync(listDMKH);
        setCustomerRaws(mappedData); // State v·∫´n ch∆∞a c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c!
        setActiveIndex(1);
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng.");
        setErrorMessage("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i l√™n.");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
      setErrorMessage("L·ªói khi l·∫•y d·ªØ li·ªáu kh√°ch h√†ng.");
    } finally {
      setLoading(false);
    }
  };

  const fetchDataDMHH = async () => {
    setErrorMessage("");
    setLoadingHH(true);
    try {
      console.log("üìå ƒêang l·∫•y d·ªØ li·ªáu kh√°ch h√†ng...");
      const listDMKH = await getDMHH(taxCode);

      if (listDMKH.length > 0) {
        console.log("‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng:", listDMKH);
        setCustomerRaws(listDMKH); // C·∫≠p nh·∫≠t state nh∆∞ng ch∆∞a d√πng ngay!

        const mappedData = await mapCustomerDataAsync(listDMKH);
        setCustomerRaws(mappedData); // State v·∫´n ch∆∞a c·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c!
        setActiveIndex(1);
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng.");
        setErrorMessage("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i l√™n.");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu:", error);
      setErrorMessage("L·ªói khi l·∫•y d·ªØ li·ªáu kh√°ch h√†ng.");
    } finally {
      setLoadingHH(false);
    }
  };

  // üÜï H√†m x·ª≠ l√Ω upload file Excel
  const [errorMessage, setErrorMessage] = useState("");

  const handleFileUpload = async (event = null) => {
    console.log("üìå handleFileUpload() ƒë∆∞·ª£c g·ªçi!", event);
    let file = null;
    setLoading(true);

    try {
      if (event) {
        console.log("üìÇ Upload th·ªß c√¥ng");
        const fileInput = event.target;
        file = fileInput.files[0];
        if (!file) return;
      } else {
        console.log("‚ö° ƒêang t·∫°o file Excel...");

        if (!customerRaws || customerRaws.length === 0) {
          throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng ƒë·ªÉ xu·∫•t Excel!");
        }

        const mappedData = await mapCustomerData(customerRaws);
        console.log("‚úÖ D·ªØ li·ªáu ƒë√£ mapping:", mappedData);

        const fileBlob = exportToExcelAuto(mappedData);
        console.log("‚úÖ ƒê√£ t·∫°o Blob Excel:", fileBlob);

        file = new File([fileBlob], "DanhSachKhachHang.xlsx", {
          type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        });
      }

      console.log("üì§ ƒêang upload file...", file);
      const importedData = await uploadExcelFile(file, "1101884452");
      console.log("‚úÖ Upload th√†nh c√¥ng:", importedData);

      setCustomerRaws(importedData);
      setErrorMessage("");
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i file Excel:", error);
      setErrorMessage(error?.message || JSON.stringify(error));
    } finally {
      setLoading(false);
      if (event) event.target.value = "";
      setActiveIndex(3);
    }
  };

  const steps = [
    { label: "L·∫•y DM kh√°ch h√†ng" },
    { label: "Mapping data" },
    { label: "Th√™m l√™n 2.0" },
    { label: "Ho√†n t·∫•t" },
  ];
  const steps_HH = [
    { label: "L·∫•y DM H√†ng ho√°" },
    { label: "Mapping data" },
    { label: "Th√™m l√™n 2.0" },
    { label: "Ho√†n t·∫•t" },
  ];

  return (
    <div className="pt-[10px] w-full flex flex-col pl-[24px] gap-3 ">
      <div className="flex flex-row w-full">
        {" "}
        <div className="flex-1 flex h-full pr-12">
          <Button
            loading={loading}
            onClick={fetchDataDMKH}
            style={{ height: "40px", width: "230px" }}
            label="ƒê·ªìng b·ªô kh√°ch h√†ng"
          />
        </div>
        <div
          className="w-full flex flex-col border-2 rounded-lg  p-6 shadow-lg "
          style={{
            boxShadow: loading
              ? "0px 4px 10px rgba(59, 130, 246, 0.5)"
              : "none",
          }}
        >
          <Steps
            model={steps}
            activeIndex={activeIndex}
            onSelect={(e) => setActiveIndex(e.index)}
            readOnly={true}
          />

          <div className="flex w-full gap-[1rem] mt-6">
            {/* T·ªïng s·ªë b·∫£n ghi */}
            <InfoCard title="S·ªë l∆∞·ª£ng b·∫£n ghi" value={customerRaws?.length} />

            {/* Tr·∫°ng th√°i Mapping */}
            <InfoCard
              title="Tr·∫°ng th√°i"
              value={activeIndex >= 1 ? "Xong" : ""}
            />

            {/* Xu·∫•t & Upload Excel */}
            <div className="flex-1 border-2 border-dotted rounded-lg p-4">
              <InfoRow
                title="T·∫£i file Excel"
                iconClass="fa-solid fa-file-excel text-green-600 cursor-pointer"
                onClick={exportToExcel}
              />

              {/* üÜï Input hidden ƒë·ªÉ ch·ªçn file */}
              <input
                type="file"
                accept=".xls, .xlsx"
                className="hidden"
                id="file-upload"
                onChange={handleFileUpload}
              />
              <label
                htmlFor="file-upload"
                className="text-blue-600 text-[13px] cursor-pointer border-2 bg-gray p-1"
              >
                Ch·ªçn file
              </label>
            </div>

            {/* Tr·∫°ng th√°i Ho√†n t·∫•t */}
            <div className="flex-1 border-2 border-dotted rounded-lg p-4">
              {" "}
              <div
                className=""
                title="K·∫øt qu·∫£"
                value={errorMessage.length > 0 ? "Th·∫•t b·∫°i" : "Th√†nh c√¥ng"}
              >
                <div className="card flex justify-content-center">
                  <Toast ref={toast} />
                  {errorMessage.length > 0 ? (
                    <Button onClick={show} label="Th·∫•t b·∫°i" />
                  ) : errorMessage.length === 0 ? (
                    ""
                  ) : !errorMessage ? (
                    "Th√†nh c√¥ng"
                  ) : (
                    ""
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="flex flex-row w-full">
        {" "}
        <div className="flex-1 flex h-full pr-12">
          <Button
            loading={loadingHH}
            onClick={fetchDataDMHH}
            style={{ height: "40px", width: "230px" }}
            label="ƒê·ªìng b·ªô h√†ng ho√°"
          />
        </div>
        <div
          className="w-full flex flex-col border-2 rounded-lg p-6"
          style={{
            boxShadow: loadingHH
              ? "0px 4px 10px rgba(59, 130, 246, 0.5)"
              : "none",
          }}
        >
          <Steps
            model={steps_HH}
            activeIndex={activeIndex}
            onSelect={(e) => setActiveIndex(e.index)}
            readOnly={false}
          />

          <div className="flex w-full gap-[1rem] mt-6">
            {/* T·ªïng s·ªë b·∫£n ghi */}
            <InfoCard title="S·ªë l∆∞·ª£ng b·∫£n ghi" value={customerRaws?.length} />

            {/* Tr·∫°ng th√°i Mapping */}
            <InfoCard
              title="Tr·∫°ng th√°i"
              value={activeIndex >= 1 ? "Xong" : ""}
            />

            {/* Xu·∫•t & Upload Excel */}
            <div className="flex-1 border-2 border-dotted rounded-lg p-4">
              <InfoRow
                title="T·∫£i file Excel"
                iconClass="fa-solid fa-file-excel text-green-600 cursor-pointer"
                onClick={exportToExcel}
              />

              {/* üÜï Input hidden ƒë·ªÉ ch·ªçn file */}
              <input
                type="file"
                accept=".xls, .xlsx"
                className="hidden"
                id="file-upload"
                onChange={handleFileUpload}
              />
              <label
                htmlFor="file-upload"
                className="text-blue-600 text-[13px] cursor-pointer border-2 bg-gray p-1"
              >
                Ch·ªçn file
              </label>
            </div>

            {/* Tr·∫°ng th√°i Ho√†n t·∫•t */}
            <div className="flex-1 border-2 border-dotted rounded-lg p-4">
              {" "}
              <div
                className=""
                title="K·∫øt qu·∫£"
                value={errorMessage.length > 0 ? "Th·∫•t b·∫°i" : "Th√†nh c√¥ng"}
              >
                <div className="card flex justify-content-center">
                  <Toast ref={toast} />
                  {errorMessage.length > 0 ? (
                    <Button onClick={show} label="Th·∫•t b·∫°i" />
                  ) : errorMessage.length === 0 ? (
                    ""
                  ) : !errorMessage ? (
                    "Th√†nh c√¥ng"
                  ) : (
                    ""
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Component hi·ªÉn th·ªã th√¥ng tin chung
const InfoCard = ({ title, value }) => (
  <div className="flex-1 border-2 border-dotted rounded-lg p-4">
    <p>{title}:</p>
    <p className="text-primary font-bold pl-2">{value}</p>
  </div>
);

// Component hi·ªÉn th·ªã h√†ng c√≥ icon
const InfoRow = ({ title, iconClass, onClick }) => (
  <div className="flex flex-row items-center justify-between">
    <p>{title}:</p>
    <span className={iconClass} onClick={onClick} />
  </div>
);
